"""
数据结构的定义：
1. 数据结构式为了高效访问数据而设计的一种数据的组织和存储方式；
2. 数据结构包含一个数据元素的集合、数据元组之间的关系以及访问和操作数据的方法；
3. list set dic tuple其实已经是一种python封装的高级数据结构了；

数据结构的分类：
1. 逻辑结构：线性和非线性两大类；线性主要包含数组、链表、栈、队列等
                         非线性包含树 图等；
2. 物理结构：数据在内存中的存储结构，可分为连续存储（数组）与分散存储（链表）。
            连续存储借助数据之间相对位置来表示数据元素之间的逻辑关系；
            分散存储借助指示数据位置的指针来表示数据元素之间的逻辑关系；

            所有数据结构都是基于数组、链表或二者的组合实现的。例如，栈和队列既可以使用
            数组实现，也可以使用链表实现；而哈希表的实现可能同时包含数组和链表；

算法的定义：
1. 解决特定问题的方法；
2. 算法特性： 输入、输出、有穷性、确定性、可行性；

算法的分类：
1. 搜索算法：深度有限搜索、广度有限搜索；
2. 排序算法：冒泡排序、插入排序、选择排序、快速排序、归并排序等；
3. 最优化算法

时间复杂度：
1. 用来描述一个算法所需时间资源的多少；为了屏蔽计算机硬件差异对评估结果的影响，我们不使用算法运行的绝对运行时间，
而是使用运行算法是执行的基本指令数量来衡量其所需的时间资源；
2. 常见的计算机基本指令有：
赋值指令、算术指令、逻辑运算指令、比较指令；
3. 时间复杂度定义：所需时间T可以表达为一个与输入规模n相关的函数：T(n)
4. 时间复杂度的大O表示法：
    由于时间复杂度只需要关注输入规模增大时，算法用时的增长趋势。而输入规模无限增大时，T(n)函数中的低阶项
    和常数项，以及高阶项的常数系数，对于增长趋势的影响就变得微乎其微，因此我们可以将其忽略掉；
    因此T(n)=5n+5 可以表示为O(n);T(n)=2n^2+2n-2 可以表示为O(n^2)
5. 常见的时间复杂度：
O(1) < O(logn) < O(n) < O(nlogn) < O(n^2) < O(2^n) < O(n!) < O(n^n)
注意：表示时间复杂度时经常将log2n简写为logn


空间复杂度：

"""

###===时间复杂度的统计===
#总的时间复杂度是T(n)=4n+1
#复习i := i + 1 中的:= 是海象运算符号：在表达式中同时进行赋值和返回赋值的值
def find_max(nums):
    max_num = nums[0] #1此赋值操作
    i = 0 #1次赋值操作
    while (i := i + 1) < len(nums): #n次加法运算 + n此赋值操作 + n次比较操作
        if nums[i] > max_num: #n-1次比较算法
            max_num = nums[i] #0 ~ (n-1)次赋值操作
    return max_num
