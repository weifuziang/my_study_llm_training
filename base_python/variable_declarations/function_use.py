# ===============函数的定义================
"""
1. 带名字的代码块，用于完成具体的任务，可重复使用
2. 内建函数、自定义函数；
3. 函数的好处：简短而清晰、效率高、提高重用性、分工协作开发、集中管理、利于维护

"""


# 函数定义
def printStar():
    """
        函数功能的说明
    :return:
    """
    row = 2
    while row > 0:
        print("*" * 3)
        row -= 1
printStar()
print("*" * 20)
printStar()

#入参函数的定义
def printStarComm(row,col) :
    while row > 0 :
        print("*"*col)
        row -= 1
printStarComm(5,6)

#形参和实参
"""
1. 形参没有分配存储空间，也没有值，相当于一个占位符;
2. 会在栈区中给函数分配存储空间， 然后给形参/局部变量分配存储空间，传递的是实际的数据
"""

#函数的参数传递
"""
1. 对象引用、对象、指针、类型
a=10
a="helloworld"
以上代码中，10是数字类型，" helloworld " 是 String 类型，而变量 a 是没有类型，她仅仅是一个对象的引用（一个指针），可以是指向数字类型对象，也可以是指向 String 类型对象。

2. 引用的概念
变量和数据是分开的，数据保存在内存中的一个位置，变量中保存着数据在内存中的地址，变量中记录数据的地址，就叫做引用；
使用id()可以查看变量中保存数据所在的内存地址；
注意：如果变量已经被定义，当给一个变量赋值的时候，本质上是修改了数据的引用，变量不再对之前的数据引用，变量改为对新赋值的数据引用，变量的名字类似于便签纸贴在数据上。

3. 传递可变和不可变类型的区别
不可变类型：number(数字)、String(字符串)、Tuple(元组)
    类似c++的值传递，如整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在fun（a）内部修改a的值，只是修改另一个复制的对象，不会影响 a 本身    注释：修改了地址，旧地址的内容不影响
    
可变的类型：List(列表)、Set(集合)、Dict(字典)
    类似c++的引用传递，如列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响
    注释：地址不变，里面的内容改变
  
***Python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。***
"""

